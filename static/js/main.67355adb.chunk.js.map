{"version":3,"sources":["component/Menu.js","component/Home.js","component/Noticias.js","component/Datos.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","className","to","Home","useState","Math","floor","random","count","setCount","imagen","imagenCount","style","background","backgroundSize","backgroundPosition","backgroundRepeat","filter","onClick","quotes","Noticias","console","log","detalles","map","p","push","offset","move","speed","index","tag","min","max","range","rand","length","profile","data","Datos","summaryDetails","key","name","role","email","phone","summary","App","basename","atEnter","atLeave","atActive","mapStyles","styles","transform","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67355adb.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './Menu.css';\n\nconst Menu = (props) => {\n    return(\n        <div className=\"menu\">\n            <ul>\n                <li><Link to=\"/\"><i className=\"material-icons\">change_history</i></Link></li>\n                <li><Link to=\"/datos\"><i className=\"material-icons\">eco</i></Link></li>\n                <li><Link to=\"/datos\"><i className=\"material-icons\">donut_large</i></Link></li>\n                <li><Link to=\"/datos\"><i className=\"material-icons\">explore</i></Link></li>\n                <li><Link to=\"/datos\"><i className=\"material-icons\">fingerprint</i></Link></li>\n            </ul>\n            \n        </div>\n    )\n}\n\nexport default Menu;","import React, { useState } from 'react';\n\nimport { Link } from \"react-router-dom\";\nimport './Home.css';\n\nconst Home = () => {\n    const [count, setCount] = useState(Math.floor(Math.random() * 1000));\n    const [imagen, imagenCount] = useState(`https://i.picsum.photos/id/${count}/1500/1500.jpg`);\n    const accion = () => {\n        setCount((Math.floor(Math.random() * 1000)));\n        imagenCount(`https://i.picsum.photos/id/${count}/1500/1500.jpg`);\n    }\n    return (\n        <div className='green-column' style={{background: `url(${imagen})`, backgroundSize: 'cover', backgroundPosition: 'center center', backgroundRepeat: 'no-repeat', filter: 'grayscale(100%)'}}>\n            <div className=\"home\">\n                <Link to=\"/datos\"><h1>Full Stack Developer</h1></Link>\n                <h2>Axel Laurent Obscura Sarzotti</h2>\n                <p>Coyoacán, México</p>\n                <i className=\"lni-angle-double-right\" onClick={accion}></i>\n            </div>\n        </div>\n        \n    )\n}\n\nexport default Home;","import React from 'react';\nimport Ticker from 'react-ticker';\n\nfunction rand(min, max) {\n    var offset = min\n    var range = (max - min) + 1\n    var randomNumber = Math.floor(Math.random() * range) + offset\n    return randomNumber\n  }\n  \n  const quotes = []\n\nconst Noticias = (props) => {\n    console.log(\"detalles: \" + props.detalles);\n\n    props.detalles.map(p => {\n        quotes.push(p);\n        console.log(\"elpush: \" + p);\n    })\n    return (\n        <div>\n            <Ticker\n                offset=\"10%\"\n                move={true}\n                speed={props.speed}\n                >\n                {(index) => (\n                    <props.tag> -{quotes[rand(0, quotes.length - 1)]}- </props.tag>\n                )}\n            </Ticker>\n        </div>\n\n    )\n};\n\nexport default Noticias;","import React from 'react';\nimport Noticias from './Noticias';\nimport data from \"../data/data\";\nimport './Datos.css';\n\nconst profile = data.profile;\n\nconst Datos = () => {\n    const detalles = [];\n    profile.map(p => {\n      detalles.push(p.summaryDetails)\n    })\n    console.log(\"Los detalles: \" + detalles[0])\n    return (\n        <div>\n            \n            <div className=\"datos\">\n            {profile.map((p, index) => (\n                <div key={index}>\n                    <h2>{p.name}</h2>\n                    <p className=\"p-0 m-0\">{p.role}</p>\n                    <h3>{p.email}</h3>\n                    <p>{p.phone}</p>\n                    <Noticias tag={'p'} speed={5} detalles={p.summaryDetails} />\n                    <hr />\n                    <h1>PROFESSIONAL SUMMARY</h1>\n                    <p>{p.summary}</p>\n                    <Noticias tag={'h3'} speed={7} detalles={p.summaryDetails} />\n                </div>\n            ))}\n            </div>\n        </div>\n\n    )\n};\n\nexport default Datos;","import React, { useState } from 'react';\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport { spring,AnimatedSwitch } from 'react-router-transition';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Menu from './component/Menu';\nimport Home from './component/Home';\nimport Datos from './component/Datos';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  function mapStyles(styles) {\n    return {\n      opacity: styles.opacity,\n      transform: `scale(${styles.scale})`,\n    };\n  }\n  function bounce(val) {\n    return spring(val, {\n      stiffness: 330,\n      damping: 100,\n    });\n  }\n  const bounceTransition = {\n    atEnter: {\n      opacity: 0,\n      scale: 0.1,\n    },\n    atLeave: {\n      opacity: 0,\n      scale: 0.9,\n    },\n    atActive: {\n      opacity: 1,\n      scale: 1,\n    },\n  };\n  return (\n    <HashRouter basename='/'>\n      <div className=\"App\">\n        <div className='wrapperHome'>\n          <div className='row'>\n              <div className='column'>\n                  <div className='blue-column'>\n                    <Menu />\n                  </div>\n              </div>\n              <div className='column contenido'>\n                  \n                    <Switch>\n                      <AnimatedSwitch\n                        atEnter={{ offset: +0 }}\n                        atLeave={{ offset: -0 }}\n                        atActive={{ offset: 0 }}\n                        mapStyles={(styles) => ({\n                          transform: `translateX(${styles.offset}%)`,\n                        })}\n                        className=\"switch-wrapper\"\n                      >\n                        <Route \n                          exact \n                          path=\"/\" \n                          render={(props) => <Home />}\n                        />\n                        <Route \n                          exact \n                          path=\"/datos\" \n                          render={(props) => <Datos />}\n                        />\n                        <Route \n                          exact \n                          path=\"/educacion\" \n                          render={(props) => <Datos />}\n                        />\n                        <Route \n                          exact \n                          path=\"/experiencia\" \n                          render={(props) => <Datos />}\n                        />\n                      </AnimatedSwitch>\n                    </Switch>\n              </div>\n          </div>\n        </div>\n        \n      </div>\n    </HashRouter>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n    <App />\n  </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}