{"version":3,"sources":["component/Menu.js","component/Home.js","component/Datos.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","className","to","Home","useState","count","setCount","imagen","imagenCount","style","background","backgroundSize","backgroundPosition","backgroundRepeat","filter","onClick","Math","floor","random","profile","data","SocialMedias","summaryDetails","Datos","map","p","index","key","offset","move","s","min","max","range","rand","length","App","basename","atEnter","atLeave","atActive","mapStyles","styles","transform","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9890524e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './Menu.css';\n\nconst Menu = (props) => {\n    return(\n        <div className=\"menu\">\n            <ul>\n                <li><Link to=\"/\"><i className=\"material-icons\">change_history</i></Link></li>\n                <li><Link to=\"/datos\"><i className=\"material-icons\">eco</i></Link></li>\n                <li><Link to=\"/datos\"><i className=\"material-icons\">donut_large</i></Link></li>\n                <li><Link to=\"/datos\"><i className=\"material-icons\">explore</i></Link></li>\n                <li><Link to=\"/datos\"><i className=\"material-icons\">fingerprint</i></Link></li>\n            </ul>\n            \n        </div>\n    )\n}\n\nexport default Menu;","import React, { useState, useEffect } from 'react';\n\nimport { Link } from \"react-router-dom\";\nimport './Home.css';\n\nconst Home = () => {\n    const [count, setCount] = useState(0);\n    const [imagen, imagenCount] = useState(\"https://i.picsum.photos/id/327/1500/1500.jpg\");\n    const accion = () => {\n        setCount((Math.floor(Math.random() * 1000)));\n        imagenCount(`https://i.picsum.photos/id/${count}/1500/1500.jpg`);\n    }\n    return (\n        <div className='green-column' style={{background: `url(${imagen})`, backgroundSize: 'cover', backgroundPosition: 'center center', backgroundRepeat: 'no-repeat', filter: 'grayscale(100%)'}}>\n            <div className=\"home\">\n                <Link to=\"/datos\"><h1>Full Stack Developer</h1></Link>\n                <h2>Axel Laurent Obscura Sarzotti</h2>\n                <p>Coyoacán, México</p>\n                <i className=\"lni-angle-double-right\" onClick={accion}></i>\n            </div>\n        </div>\n        \n    )\n}\n\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport data from \"../data/data\";\nimport Ticker from 'react-ticker';\nimport './Datos.css';\n\nconst profile = data.profile;\nconst socialMediaList = data.SocialMedias;\nconst summaryDetails = data.summaryDetails;\n\nconst quotes = [\n    '“We are convinced that liberty without socialism is privilege, injustice; and that socialism without liberty is slavery and brutality.”',\n    '“Private capital tends to become concentrated in few hands, partly because of competition among the capitalists, and partly because technological development and the increasing division of labor encourage the formation of larger units of production at the expense of smaller ones. The result of these developments is an oligarchy of private capital the enormous power of which cannot be effectively checked even by a democratically organized political society. This is true since the members of legislative bodies are selected by political parties, largely financed or otherwise influenced by private capitalists who, for all practical purposes, separate the electorate from the legislature. The consequence is that the representatives of the people do not in fact sufficiently protect the interests of the underprivileged sections of the population. Moreover, under existing conditions, private capitalists inevitably control, directly or indirectly, the main sources of information (press, radio, education). It is thus extremely difficult, and indeed in most cases quite impossible, for the individual citizen to come to objective conclusions and to make intelligent use of his political rights.”',\n    '“Freedom is always the freedom of the dissenter.”',\n    '“Civil government, so far as it is instituted for the security of property, is in reality instituted for the defense of the rich against the poor, or of those who have some property against those who have none at all.”',\n    '“For the recognition of private property has really harmed Individualism, and obscured it, by confusing a man with what he possesses.”',\n    '“Everyone should be able to attend to his religious as well as his bodily needs without the police sticking their nose in.”',\n    '“Philosophers have hitherto interpreted the world in various ways; the point, however, is to change it.”',\n    '“Money is the alienated essence of man’s labor and life; and this alien essence dominates him as he worships it.\"',\n  ]\n\n  function rand(min, max) {\n    var offset = min\n    var range = (max - min) + 1\n    var randomNumber = Math.floor(Math.random() * range) + offset\n    return randomNumber\n  } \n\nconst Datos = () => {\n    return (\n        <div className=\"datos\">\n            {profile.map((p, index) => (\n                <div key={index}>\n                    {/*\n                    <h2>{p.name}</h2>\n                    <p className=\"p-0 m-0\">{p.role}</p>\n                    <h3>{p.email}</h3>\n                    <p>{p.phone}</p>\n                    <hr />\n                    <h1>PROFESSIONAL SUMMARY</h1>\n                    <p>{p.summary}</p>\n                    \n                    <ul className=\"hidden-xs\">\n                        {p.summaryDetails.map(sd => (\n                            <li>{sd}</li>\n                        ))}\n                    </ul>\n                     */}\n                    <Ticker\n                        offset=\"10%\"\n                        move={true}\n                        >\n                            {p.summaryDetails.map((s, index) => (\n                                <h1 key={index}>{s[rand(0, s.length - 1)]}</h1>\n                            ))}\n                    </Ticker>\n                </div>\n            ))}\n            {/* \n            <ul>\n                {socialMediaList.map(s => (<li>{s}</li>))}\n            </ul>\n            <div>\n                {\n\t\t\t\t\tdata.Experiences.map((experience, i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<a href={experience.url}>\n\t\t\t\t\t\t\t\t\t\t<img src={experience.logo} alt={experience.companyName} />\n\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<a href={experience.url}>{experience.companyName}</a>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t{experience.roles.map(function (role, i) { \n\t\t\t\t\t\t\t\t\t\t\t\treturn <div key={i}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h5>{role.title}</h5>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{role.startDate}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>{role.location}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{role.description}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t}\n            </div>\n            <div>\n                {\n                  data.Skills.map((skill) => {\n                    return (\n                      <div>\n                        <h4>{skill.Area}</h4>\n                        <ul>\n                          {\n                            skill.SkillSet.map((skillDetail) => {\n                              return (\n                                  <li>\n                                    {skillDetail.Name}\n                                  </li>\n                              );\n                            })\n                          }\n                        </ul>\n                      </div>\n                    );\n                  })\n                } \n            </div>\n            */}\n        </div>\n\n    )\n};\n\nexport default Datos;","import React, { useState } from 'react';\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport { spring,AnimatedSwitch } from 'react-router-transition';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Menu from './component/Menu';\nimport Home from './component/Home';\nimport Datos from './component/Datos';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  function mapStyles(styles) {\n    return {\n      opacity: styles.opacity,\n      transform: `scale(${styles.scale})`,\n    };\n  }\n  function bounce(val) {\n    return spring(val, {\n      stiffness: 330,\n      damping: 100,\n    });\n  }\n  const bounceTransition = {\n    atEnter: {\n      opacity: 0,\n      scale: 0.1,\n    },\n    atLeave: {\n      opacity: 0,\n      scale: 0.9,\n    },\n    atActive: {\n      opacity: 1,\n      scale: 1,\n    },\n  };\n  return (\n    <HashRouter basename='/'>\n      <div className=\"App\">\n        <div className='wrapperHome'>\n          <div className='row'>\n              <div className='column'>\n                  <div className='blue-column'>\n                    <Menu />\n                  </div>\n              </div>\n              <div className='column contenido'>\n                  \n                    <Switch>\n                      <AnimatedSwitch\n                        atEnter={{ offset: +0 }}\n                        atLeave={{ offset: -0 }}\n                        atActive={{ offset: 0 }}\n                        mapStyles={(styles) => ({\n                          transform: `translateX(${styles.offset}%)`,\n                        })}\n                        className=\"switch-wrapper\"\n                      >\n                        <Route \n                          exact \n                          path=\"/\" \n                          render={(props) => <Home />}\n                        />\n                        <Route \n                          exact \n                          path=\"/datos\" \n                          render={(props) => <Datos />}\n                        />\n                        <Route \n                          exact \n                          path=\"/educacion\" \n                          render={(props) => <Datos />}\n                        />\n                        <Route \n                          exact \n                          path=\"/experiencia\" \n                          render={(props) => <Datos />}\n                        />\n                      </AnimatedSwitch>\n                    </Switch>\n              </div>\n          </div>\n        </div>\n        \n      </div>\n    </HashRouter>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n    <App />\n  </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}