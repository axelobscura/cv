{"version":3,"sources":["component/Menu.js","component/Intro.js","component/ProfessionalSummary.js","App.js","serviceWorker.js","index.js"],"names":["Menu","className","Container","Row","Col","Nav","Link","exact","href","style","paddingLeft","src","alt","title","class","defaultActiveKey","eventKey","display","App","fluid","xs","path","component","Intro","ProfessionalSummary","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUA6CeA,G,MArCF,WACT,OACI,yBAAKC,UAAU,QACX,kBAACC,EAAA,EAAD,CAAWD,UAAU,oBACjB,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,OAAO,EAAMC,KAAK,IAAIC,MAAO,CAAEC,YAAa,MAClD,yBAAKC,IAAI,sBAAsBC,IAAI,uBAAuBC,MAAM,0BAEpE,sCAAW,6BAAX,oBACA,oDACA,6BACA,uBAAGZ,UAAU,aAAY,uBAAGa,MAAM,kBAAT,QAAzB,uBACA,uBAAGb,UAAU,aAAY,uBAAGa,MAAM,kBAAT,SAAzB,qBACA,uBAAGb,UAAU,aAAY,uBAAGa,MAAM,kBAAT,cAAzB,mBAIZ,kBAACT,EAAA,EAAD,CAAKU,iBAAiB,IAAId,UAAU,eAChC,kBAACI,EAAA,EAAIC,KAAL,CAAUE,KAAK,wBAAwBQ,SAAS,UAAhD,wBACA,kBAACX,EAAA,EAAIC,KAAL,CAAUE,KAAK,SAASQ,SAAS,UAAjC,qBACA,kBAACX,EAAA,EAAIC,KAAL,CAAUE,KAAK,SAASQ,SAAS,UAAjC,aACA,kBAACX,EAAA,EAAIC,KAAL,CAAUE,KAAK,SAASQ,SAAS,UAAjC,aACA,kBAACX,EAAA,EAAIC,KAAL,CAAUE,KAAK,SAASQ,SAAS,UAAjC,2BACA,kBAACX,EAAA,EAAIC,KAAL,CAAUE,KAAK,SAASQ,SAAS,UAAjC,YAEJ,kBAACd,EAAA,EAAD,CAAWD,UAAU,iBACjB,kBAACE,EAAA,EAAD,CAAKM,MAAO,CAAEQ,QAAS,SACnB,kBAACb,EAAA,EAAD,KAAK,uBAAGU,MAAM,kBAAT,YACL,kBAACV,EAAA,EAAD,KAAK,uBAAGU,MAAM,kBAAT,aACL,kBAACV,EAAA,EAAD,KAAK,uBAAGU,MAAM,kBAAT,kBChCV,G,MAAA,kBACX,kBAACZ,EAAA,EAAD,CAAWD,UAAU,SACjB,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,0CCJD,oBACX,kBAACF,EAAA,EAAD,CAAWD,UAAU,MACjB,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,oDACA,iCCqBDc,MApBf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAACC,EAAA,EAAD,CAAWiB,OAAK,GACd,kBAAChB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,WACb,kBAAC,EAAD,OAEF,kBAACG,EAAA,EAAD,CAAKgB,GAAI,IACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOb,OAAK,EAACc,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOhB,OAAK,EAACc,KAAK,wBAAwBC,UAAWE,UCX/CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OACgBC,SAASC,eAAe,SDuHtC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3f906e86.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Link } from \"react-router-dom\";\nimport Nav from 'react-bootstrap/Nav';\nimport './Menu.css';\n\nconst Menu = () => {\n    return (\n        <div className=\"menu\">\n            <Container className=\"datos personales\">\n                <Row>\n                    <Col>\n                        <Nav.Link exact={true} href=\"/\" style={{ paddingLeft: '0' }}>\n                            <img src=\"images/profile.jpeg\" alt=\"Full Stack Developer\" title=\"Full Stack Developer\" />\n                        </Nav.Link>\n                        <h1>Axel L.<br />Obscura Sarzotti</h1>\n                        <h2>Full Stack Developer</h2>\n                        <hr />\n                        <p className=\"text-left\"><i class=\"material-icons\">call</i> (52)(55) 3220-6321</p>\n                        <p className=\"text-left\"><i class=\"material-icons\">email</i> axosar@gmail.com</p>\n                        <p className=\"text-left\"><i class=\"material-icons\">directions</i> Mexico City</p>\n                    </Col>\n                </Row>\n            </Container>\n            <Nav defaultActiveKey=\"/\" className=\"flex-column\">\n                <Nav.Link href=\"/professional-summary\" eventKey=\"activo\">Professional Summary</Nav.Link>\n                <Nav.Link href=\"/datos\" eventKey=\"activo\">Technical Summary</Nav.Link>\n                <Nav.Link href=\"/datos\" eventKey=\"activo\">Education</Nav.Link>\n                <Nav.Link href=\"/datos\" eventKey=\"activo\">Languages</Nav.Link>\n                <Nav.Link href=\"/datos\" eventKey=\"activo\">Professional Experience</Nav.Link>\n                <Nav.Link href=\"/datos\" eventKey=\"activo\">Contact</Nav.Link>\n            </Nav>\n            <Container className=\"redessociales\">\n                <Row style={{ display: 'none' }}>\n                    <Col><i class=\"material-icons\">twitter</i></Col>\n                    <Col><i class=\"material-icons\">facebook</i></Col>\n                    <Col><i class=\"material-icons\">linkedin</i></Col>\n                </Row>\n            </Container>\n        </div>\n    )\n}\n\nexport default Menu;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './ProfessionalSummary.css';\n\nexport default () => (\n    <Container className=\"intro\">\n        <Row>\n            <Col>\n                <h1>Intro</h1>\n            </Col>\n        </Row>\n    </Container>\n);","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './ProfessionalSummary.css';\n\nexport default () => (\n    <Container className=\"ps\">\n        <Row>\n            <Col>\n                <h1>Professional Summary</h1>\n                <hr />\n            </Col>\n        </Row>\n    </Container>\n);","import React, { useState } from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './App.css';\nimport Menu from './component/Menu';\nimport Intro from './component/Intro';\nimport ProfessionalSummary from './component/ProfessionalSummary';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container fluid>\n        <Row>\n          <Col className=\"p-0 m-0\">\n            <Menu />\n          </Col>\n          <Col xs={10}>\n            <Switch>\n              <Route exact path=\"/\" component={Intro} />\n              <Route exact path=\"/professional-summary\" component={ProfessionalSummary} />\n            </Switch>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}